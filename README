By stepping into the function when calling fib(5), I get the following sequence:
fib(5) -> fib(4) -> fib(3) -> fib(2) -> fib(1) -> fib(0)
-> fib(1) -> fib(2)
-> fib(1) -> fib(0)
-> fib(3) -> fib(2) -> fib(1) -> fib(0)
-> fib(1)
Expressed in big-O notation, the time complexity is O(2^n), indicating that the time required by the algorithm grows exponentially with the input size n. This exponential growth leads to inefficiency for larger values of n due to the vast number of redundant calculations.


problem.1: Time Complexity Analysis: The time complexity arises mainly from the insertion and extraction operations on the min-heap, which take O(log K) time. Since there are N total elements, and each element is inserted and extracted once, the total time complexity is O(N * log K).

Possible Improvements:

If memory usage is not a concern, you could store all elements in a single array, sort it, and return it. This approach would have a time complexity of O(N * log N), but it might be faster in practice for small values of K.

problem.2: Time Complexity Analysis: The time complexity arises from iterating over the array once. Since each element is visited only once, the time complexity is O(N).

Possible Improvements:

If memory usage is not a concern, you could use additional data structures like hash tables to achieve a time complexity of O(N) while potentially reducing the constant factor compared to the two-pointer approach.
